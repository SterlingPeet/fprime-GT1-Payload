/**
 * FP Backgrounds:
 *
 * F prime background colors are used to set the color of the various items in the system. This means highlighting
 * Events, and  Channels based on severity. These colors should define two pairs, the color, and a .table-hover hover
 * color for use in hover-tables.
 */
.fp-color-fatal {
    background-color: #ff0000;
}
.table-hover .fp-color-fatal:hover {
    background-color: #e60000;
}
.fp-color-warn-hi {
    background-color: #ff8000;
}
.table-hover .fp-color-warn-hi:hover {
    background-color: #e67300;
}
.fp-color-warn-lo {
    background-color: #ffff00;
}
.table-hover .fp-color-warn-lo:hover {
    background-color: #e6e600;
}
.fp-color-act-hi {
    background-color: #0080ff;
}
.table-hover .fp-color-act-hi:hover {
    background-color: #0073e6;
}
.fp-color-act-lo {
    background-color: #808080;
}
.table-hover .fp-color-act-lo:hover {
    background-color: #737373;
}
.fp-color-command {
    background-color: #00ff00;
}
.table-hover .fp-color-command:hover {
    background-color: #00e600;
}
.fp-color-logging {
    background-color: #f0fff0;
}
/**
 * Filter the orb image when there is no data flow.
 */
img.dead {
    -webkit-filter: grayscale(100%); /* Safari 6.0 - 9.0 */
    filter: grayscale(100%);
}

/**
 * FP Containerization:
 *
 * This section allows for providing flex and scroll capabilities. This allows our containers to fill the remaining
 * space without overflowing.  This is done by using "fp-full-height" on the top-level container. Then for each
 * non-growable items should be labeled with .fp-flex-header. Growable content's direct parent may use
 * "fp-scroll-container" and the content should be "fp-scrollable". "fp-flex-repeater" can label each intermediary
 * parent for the growable content which is not the direct parent.
 */
body, .fp-full-height {
    height: 100vh;
}
.fp-flex-container {
    display: flex;
    flex-direction: column;
}
.fp-flex-repeater {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
}
.fp-flex-header {
    flex-grow: 0;
}
.fp-scroll-container {
    overflow: hidden;
    flex-grow: 1;
    position: relative;
}
.fp-scrollable {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    overflow: auto;
}


/**
 * Based on work from: https://www.abeautifulsite.net/whipping-file-inputs-into-shape-with-bootstrap-3 these CSS items
 * help make the file input looks like other buttons. Thus allowing it to play nicely with the other bootstrap buttons
 * being used by the project.
 */
.btn-file {
    position: relative;
    overflow: hidden;
    height: 100%;
}
/**
 * FP scrollable container. This will allow a container to sub-scroll rather than increase the page's size. This will
 * allow the user to continue to use the page controls without worry to hiding the controls at the top.
 */
.fp-scroll-container {
    overflow: auto;
}

/*https://www.w3schools.com/css/css_tooltip.asp*/
.tooltip {
    position: relative;
    display: inline-block;
    border-bottom: 1px dotted black;
}

.tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 0;

    /* Position the tooltip */
    position: absolute;
    z-index: 1;
}

.tooltip:hover .tooltiptext {
    visibility: visible;
}


/**
 * Table CSS to allow for the last child to take up its needed space. This means the last column of the table will be
 * displayed taking up the full amount of the remaining space.
 */
table {
    width: auto;
    white-space: nowrap;
    text-overflow: ellipsis;
}
table td:last-child {
    width: 100%;
}
